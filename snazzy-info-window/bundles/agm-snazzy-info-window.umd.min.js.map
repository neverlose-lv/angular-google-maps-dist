{"version":3,"sources":["../../../packages/snazzy-info-window/src/lib/directives/snazzy-info-window.ts","../../../packages/snazzy-info-window/src/lib/snazzy-info-window.module.ts"],"names":["AgmSnazzyInfoWindow","_marker","_wrapper","_manager","_loader","this","isOpen","isOpenChange","EventEmitter","placement","maxWidth","maxHeight","openOnMarkerClick","closeOnMapClick","closeWhenOthersOpen","showCloseButton","panOnOpen","beforeOpen","afterClose","_snazzyInfoWindowInitialized","prototype","ngOnChanges","changes","_nativeSnazzyInfoWindow","_openInfoWindow","_closeInfoWindow","_updatePosition","ngAfterViewInit","_this","m","getNativeMarker","load","then","require","module","Promise","all","getNativeMap","elems","options","map","content","backgroundColor","padding","border","borderRadius","fontColor","pointer","shadow","wrapperClass","callbacks","_createViewContent","emit","afterOpen","openStatus","marker","position","lat","latitude","lng","longitude","open","close","_viewContainerRef","length","evr","createEmbeddedView","_templateRef","setContent","_outerWrapper","nativeElement","setTimeout","detectChanges","setPosition","ngOnDestroy","destroy","Component","args","selector","template","AgmMarker","decorators","type","Optional","Host","SkipSelf","GoogleMapsAPIWrapper","MarkerManager","MapsAPILoader","Input","Output","ViewChild","read","ElementRef","static","ViewContainerRef","ContentChild","TemplateRef","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import { AgmMarker, GoogleMapsAPIWrapper, MapsAPILoader, MarkerManager } from '@agm/core';\nimport { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Host, Input, OnChanges, OnDestroy, Optional, Output, SimpleChanges, SkipSelf, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';\n\ndeclare var require: any;\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'agm-snazzy-info-window',\n  template: '<div #outerWrapper><div #viewContainer></div></div><ng-content></ng-content>',\n})\nexport class AgmSnazzyInfoWindow implements AfterViewInit, OnDestroy, OnChanges {\n  /**\n   * The latitude and longitude where the info window is anchored.\n   * The offset will default to 0px when using this option. Only required/used if you are not using a agm-marker.\n   */\n  @Input() latitude: number;\n\n  /**\n   * The longitude where the info window is anchored.\n   * The offset will default to 0px when using this option. Only required/used if you are not using a agm-marker.\n   */\n  @Input() longitude: number;\n\n  /**\n   * Changes the open status of the snazzy info window.\n   */\n  @Input() isOpen = false;\n\n  /**\n   * Emits when the open status changes.\n   */\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /**\n   * Choose where you want the info window to be displayed, relative to the marker.\n   */\n  @Input() placement: 'top' | 'bottom' | 'left' | 'right' = 'top';\n\n  /**\n   * The max width in pixels of the info window.\n   */\n  @Input() maxWidth: number | string = 200;\n\n  /**\n   * The max height in pixels of the info window.\n   */\n  @Input() maxHeight: number | string = 200;\n\n  /**\n   * The color to use for the background of the info window.\n   */\n  @Input() backgroundColor: string;\n\n  /**\n   * A custom padding size around the content of the info window.\n   */\n  @Input() padding: string;\n\n  /**\n   * A custom border around the info window. Set to false to completely remove the border.\n   * The units used for border should be the same as pointer.\n   */\n  @Input() border: {width: string; color: string} | boolean;\n\n  /**\n   * A custom CSS border radius property to specify the rounded corners of the info window.\n   */\n  @Input() borderRadius: string;\n\n  /**\n   * The font color to use for the content inside the body of the info window.\n   */\n  @Input() fontColor: string;\n\n  /**\n   * The font size to use for the content inside the body of the info window.\n   */\n  @Input() fontSize: string;\n\n  /**\n   * The height of the pointer from the info window to the marker.\n   * Set to false to completely remove the pointer.\n   * The units used for pointer should be the same as border.\n   */\n  @Input() pointer: string | boolean;\n\n  /**\n   * The CSS properties for the shadow of the info window.\n   * Set to false to completely remove the shadow.\n   */\n  @Input() shadow: boolean | {h?: string, v?: string, blur: string, spread: string, opacity: number, color: string};\n\n  /**\n   * Determines if the info window will open when the marker is clicked.\n   * An internal listener is added to the Google Maps click event which calls the open() method.\n   */\n  @Input() openOnMarkerClick = true;\n\n  /**\n   * Determines if the info window will close when the map is clicked. An internal listener is added to\n   * the Google Maps click event which calls the close() method.\n   * This will not activate on the Google Maps drag event when the user is panning the map.\n   */\n  @Input() closeOnMapClick = true;\n\n  /**\n   * An optional CSS class to assign to the wrapper container of the info window.\n   * Can be used for applying custom CSS to the info window.\n   */\n  @Input() wrapperClass: string;\n\n  /**\n   * Determines if the info window will close when any other Snazzy Info Window is opened.\n   */\n  @Input() closeWhenOthersOpen = false;\n\n  /**\n   * Determines if the info window will show a close button.\n   */\n  @Input() showCloseButton = true;\n\n  /**\n   * Determines if the info window will be panned into view when opened.\n   */\n  @Input() panOnOpen = true;\n\n  /**\n   * Emits before the info window opens.\n   */\n  @Output() beforeOpen: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits before the info window closes.\n   */\n  @Output() afterClose: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * @internal\n   */\n  @ViewChild('outerWrapper', {read: ElementRef, static: false}) _outerWrapper: ElementRef;\n\n  /**\n   * @internal\n   */\n  @ViewChild('viewContainer', {read: ViewContainerRef, static: false}) _viewContainerRef: ViewContainerRef;\n\n  /**\n   * @internal\n   */\n  @ContentChild(TemplateRef, {static: false}) _templateRef: TemplateRef<any>;\n\n  protected _nativeSnazzyInfoWindow: any;\n  protected _snazzyInfoWindowInitialized: Promise<any> | null = null;\n\n  constructor(\n    @Optional() @Host() @SkipSelf() private _marker: AgmMarker,\n    private _wrapper: GoogleMapsAPIWrapper,\n    private _manager: MarkerManager,\n    private _loader: MapsAPILoader,\n  ) {}\n\n  /**\n   * @internal\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._nativeSnazzyInfoWindow == null) {\n      return;\n    }\n    if ('isOpen' in changes && this.isOpen) {\n      this._openInfoWindow();\n    } else if ('isOpen' in changes && !this.isOpen) {\n      this._closeInfoWindow();\n    }\n    if (('latitude' in changes || 'longitude' in changes) && this._marker == null) {\n      this._updatePosition();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  ngAfterViewInit() {\n    const m = this._manager != null ? this._manager.getNativeMarker(this._marker) : null;\n    this._snazzyInfoWindowInitialized = this._loader.load()\n      .then(() => require('snazzy-info-window'))\n      .then((module: any) => Promise.all([module, m, this._wrapper.getNativeMap()]))\n      .then((elems) => {\n        const options: any = {\n          map: elems[2],\n          content: '',\n          placement: this.placement,\n          maxWidth: this.maxWidth,\n          maxHeight: this.maxHeight,\n          backgroundColor: this.backgroundColor,\n          padding: this.padding,\n          border: this.border,\n          borderRadius: this.borderRadius,\n          fontColor: this.fontColor,\n          pointer: this.pointer,\n          shadow: this.shadow,\n          closeOnMapClick: this.closeOnMapClick,\n          openOnMarkerClick: this.openOnMarkerClick,\n          closeWhenOthersOpen: this.closeWhenOthersOpen,\n          showCloseButton: this.showCloseButton,\n          panOnOpen: this.panOnOpen,\n          wrapperClass: this.wrapperClass,\n          callbacks: {\n            beforeOpen: () => {\n              this._createViewContent();\n              this.beforeOpen.emit();\n            },\n            afterOpen: () => {\n              this.isOpenChange.emit(this.openStatus());\n            },\n            afterClose: () => {\n              this.afterClose.emit();\n              this.isOpenChange.emit(this.openStatus());\n            },\n          },\n        };\n        if (elems[1] != null) {\n          options.marker = elems[1];\n        } else {\n          options.position = {\n            lat: this.latitude,\n            lng: this.longitude,\n          };\n        }\n        this._nativeSnazzyInfoWindow = new elems[0](options);\n      });\n    this._snazzyInfoWindowInitialized.then(() => {\n        if (this.isOpen) {\n          this._openInfoWindow();\n        }\n    });\n  }\n\n  protected _openInfoWindow() {\n    this._snazzyInfoWindowInitialized.then(() => {\n      this._createViewContent();\n      this._nativeSnazzyInfoWindow.open();\n    });\n  }\n\n  protected _closeInfoWindow() {\n    this._snazzyInfoWindowInitialized.then(() => {\n      this._nativeSnazzyInfoWindow.close();\n    });\n  }\n\n  protected _createViewContent() {\n    if (this._viewContainerRef.length === 1) {\n      return;\n    }\n    const evr = this._viewContainerRef.createEmbeddedView(this._templateRef);\n    this._nativeSnazzyInfoWindow.setContent(this._outerWrapper.nativeElement);\n    // we have to run this in a separate cycle.\n    setTimeout(() => {\n      evr.detectChanges();\n    });\n  }\n\n  protected _updatePosition() {\n    this._nativeSnazzyInfoWindow.setPosition({\n      lat: this.latitude,\n      lng: this.longitude,\n    });\n  }\n\n  /**\n   * Returns true when the Snazzy Info Window is initialized and open.\n   */\n  openStatus(): boolean {\n    return this._nativeSnazzyInfoWindow && this._nativeSnazzyInfoWindow.isOpen();\n  }\n\n  /**\n   * @internal\n   */\n  ngOnDestroy() {\n    if (this._nativeSnazzyInfoWindow) {\n      this._nativeSnazzyInfoWindow.destroy();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AgmSnazzyInfoWindow } from './directives/snazzy-info-window';\n\n@NgModule({\n  declarations: [AgmSnazzyInfoWindow],\n  exports: [AgmSnazzyInfoWindow],\n})\nexport class AgmSnazzyInfoWindowModule {}\n"]}